<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">
  <!--配置 controller 的扫描器-->
  <mvc:annotation-driven/>
  <context:component-scan base-package="com.interview.web"/>
  <!--扫描静态资源文件-->
  <mvc:default-servlet-handler/>
  <mvc:resources mapping="/statics/**" location="/statics/"/>

  <!--完成视图的对应-->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/WEB-INF/jsp/"
        p:suffix=".jsp"/>

  <!--消息转换器 输出对象转JSON支持-->
  <mvc:annotation-driven>
    <mvc:message-converters>
      <!--避免返回String乱码-->
      <bean class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
          <list>
            <value>text/plain;charset=UTF-8</value>
            <value>text/html;charset=UTF-8</value>
          </list>
        </property>
      </bean>
      <!--Json转换，property 避免 Ie 执行 Ajax 时,返回 Json 出现下载文件-->
      <!--<bean class="org.springframework.http.converter.json.GsonHttpMessageConverter">-->
      <bean class="com.interview.conf.GsonMessageConfig">
        <property name="supportedMediaTypes">
          <list>
            <value>text/plain;charset=UTF-8</value>
            <value>application/json;charset=UTF-8</value>
          </list>
        </property>
        <!--输出json结果格式化-->
        <property name="gson">
          <bean class="org.springframework.http.converter.json.GsonFactoryBean">
            <!--输出null，false则不输出null值
            <property name="serializeNulls" value="true" />-->
            <!--不对html标签转码，false会导致所有html标签转码为 \ue300 格式-->
            <property name="disableHtmlEscaping" value="true"/>
            <!--格式化日期-->
            <property name="dateFormatPattern" value="yyyy-MM-dd HH:mm:ss"/>
          </bean>
        </property>
      </bean>
    </mvc:message-converters>
  </mvc:annotation-driven>

  <!--配置自定义的拦截器-->
  <mvc:interceptors>
    <!--
      用户访问路径日志记录拦截器
      附: 性能上会降低一些
    -->
    <mvc:interceptor>
      <mvc:mapping path="/user/**"/>
      <bean class="com.interview.interceptor.UserLogInterceptor"/>
    </mvc:interceptor>

    <!--
      用户 cookie 自动登录的拦截器
      主要是用于实现用户的自动登录功能,不用每次关闭浏览器之后再打开就要重新登录了.
      因为需要在 session 中找不到用户的时候从 cookie 中查找,所以需要放置到其他用户拦截器的上面,
      不管结果如何,都会继续执行到下一个拦截器.
    -->
    <mvc:interceptor>
      <!--用户的全部操作,都必须经过这个拦截器-->
      <mvc:mapping path="/user/*"/>

      <!--使用那个拦截器-->
      <bean class="com.interview.interceptor.UserSessionInterceptor"/>
    </mvc:interceptor>

    <!--用户未登录时的拦截器-->
    <mvc:interceptor>
      <!--首页-->
      <mvc:mapping path="/user/home"/>
      <!--提交面试题目-->
      <mvc:mapping path="/user/addTopic"/>
      <!--跳转到考试页面,获取考试题目列表,提交考试-->
      <mvc:mapping path="/user/userTestPage"/>
      <mvc:mapping path="/user/submitUserTest"/>
      <mvc:mapping path="/user/addExamUserTest"/>

      <!--进行处理的拦截器-->
      <bean class="com.interview.interceptor.UserNoLoginInterceptor"/>
    </mvc:interceptor>
    <!--用户登录后的拦截器-->
    <mvc:interceptor>
      <!--用户登录/注册-->
      <mvc:mapping path="/user/login"/>
      <mvc:mapping path="/user/register"/>

      <bean class="com.interview.interceptor.UserAlreadyLoginInterceptor"/>
    </mvc:interceptor>
  </mvc:interceptors>

</beans>